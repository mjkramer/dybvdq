* Things to do
- window resize handling
- scattergl wtf
- git remote @ NERSC
- deploy to aftershock

* Docker workflow (on aftershock.lbl.gov)
git pull
# copy build directory (with JS bundle etc.) from local build
docker build -t dayabay/dybvdq .
docker run -d --net=host -v .:/app dayabay/dybvdq
iptables -A IN_public_allow -p tcp -m tcp --dport 5000 -m conntrack --ctstate NEW -j ACCEPT

* Database stuff
** Making a snapshot
#+BEGIN_SRC bash
mysqldump -h dybdq.ihep.ac.cn -u dybrw -p --opt dq_db DqDetectorNew DqDetectorNewVld DqLiveTime most_recent_file_tag > dq_db.20180628.sql
#+END_SRC
-- takes < 1 minute on a good day

** Running on aftershock
Then scp the .sql to dayabay@aftershock.lbl.gov:visual_dq/mysql/dumps.
It seems faster to transfer from dybdq than from lxslc6.
What about mysqldump'ing directly onto aftershock? Bad idea; locks tables for too long.

docker run -d --name=vdq-mysql --user=1000:1000 --env="MYSQL_ROOT_PASSWORD=***REMOVED***" -p 6603:3306 -v ~dayabay/visual_dq/mysql/conf.d:/etc/mysql/conf.d -v ~dayabay/visual_dq/mysql/data:/var/lib/mysql mysql:5.7

** Running on DigitalOcean
rm -rf ~/visual_dq/mysql/data && mkdir -p ~/visual_dq/mysql/data
docker container rm -f dybvdq-mysql
docker run -d --name=dybvdq-mysql --env="MYSQL_ROOT_PASSWORD=***REMOVED***" -p 3306:3306 -v ~/visual_dq/mysql/data:/var/lib/mysql mysql:5.7
docker cp mysql/dumps/dq_db.20180904.sql dybvdq-mysql:/
docker exec -it dybvdq-mysql /bin/bash
  mysql -p -e "create database dq_db"
  mysql -p dq_db < dq_db.20180904.sql
  rm /dq_db.20180904.sql

The load took around 8 minutes on DigitalOcean

** Replication junk
(OLD) mysql> show master status;
+------------------+-----------+--------------+------------------+
| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+-----------+--------------+------------------+
| mysql-bin.000263 | 494427353 |              |                  |
+------------------+-----------+--------------+------------------+
1 row in set (0.00 sec)

+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000266 |      637 |              |                  |
+------------------+----------+--------------+------------------+
1 row in set (0.00 sec)


https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql

* References
- https://github.com/Microsoft/TypeScript-React-Starter
- https://github.com/sw-yx/react-typescript-cheatsheet
- https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935

* Opening the project in VS Code
So far succeeded with opening dybvdq-front folder. Haven't tried opening the whole chooch.

* Updating type definitions
Just run ~typesync~

* Linting setup
** Before:
#+BEGIN_SRC json
"extends": ["tslint:recommended", "tslint-react", "tslint-config-prettier"],
#+END_SRC
** After:
#+BEGIN_SRC json
"extends": [],
"defaultSeverity": "warning",
#+END_SRC

        "after": ["y", "y", "P", "k", ">", ">", "C"]

* From RunAndFile.tsx (ViewProps)
#+BEGIN_SRC typescript
  // Event handlers must return any instead of void
  // https://github.com/piotrwitek/react-redux-typescript-guide#caveat-with-bindactioncreators
  // onChangeRunno: (e: React.ChangeEvent<HTMLInputElement>) => void;
  // onChangeFileno: (e: React.ChangeEvent<HTMLInputElement>) => any;
  // onClick: (e: React.MouseEvent<any>) => any;
  onChangeRunno: React.ChangeEventHandler<HTMLInputElement>;
  onChangeFileno: React.ChangeEventHandler<HTMLInputElement>;
  onClick: React.MouseEventHandler<any>;
#+END_SRC

* Contents of src/components/App.test.tsx
#+BEGIN_SRC typescript
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import App from './App';

it('renders without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<App />, div);
  ReactDOM.unmountComponentAtNode(div);
});
#+END_SRC

* Contents of src/App.css
#+BEGIN_SRC css
.App {
  text-align: center;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 80px;
}

.App-header {
  background-color: #222;
  height: 150px;
  padding: 20px;
  color: white;
}

.App-title {
  font-size: 1.5em;
}

.App-intro {
  font-size: large;
}

@keyframes App-logo-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
#+END_SRC

* Contents of src/index.css
#+BEGIN_SRC css
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}
#+END_SRC
