# Based mainly on http://docs.gunicorn.org/en/stable/deploy.html
# ${ENV_VARS} are injected by envsubst in start_nginx.sh

load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

pcre_jit on;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 65;

    gzip on;

    upstream backend {
        # fail_timeout=0 means we always retry an upstream even if it failed to
        # return a good HTTP response
        server dybvdq-back:5000 fail_timeout=0;
    }

    server {
        listen 443 ssl;
        server_name ${DYBVDQ_HOSTNAME};
        ssl_certificate /certs/fullchain.pem;
        ssl_certificate_key /certs/privkey.pem;
        root /webroot;

        # if no Host match, close the connection to prevent host spoofing
        # https://serverfault.com/questions/578648
        if ($host != $server_name) {
            return 444;
        }

        location / {
            auth_basic "TOP SECRET";
            auth_basic_user_file /htpasswd;
            # checks for static file, if not found proxy to app
            try_files /maintenance.html $uri @proxy_to_backend;
        }

        location = / {
            index index.html;
        }

        location @proxy_to_backend {
            proxy_pass http://backend;
            proxy_set_header Host $http_host;
            # proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
        }

        error_page 500 502 503 504 /500.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    server {
        listen 80;
        server_name ${DYBVDQ_HOSTNAME};

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        # if no Host match, close the connection to prevent host spoofing
        listen 80 default_server;
        return 444;
    }
}
